{%- macro for_type(variable)                     -%}{% for type in variable.types %}{{ type.string }}{% if not loop.last %}, {% endif -%}{% endfor %}{%- endmacro -%}
{%- macro fix_type_isinstance(type)              -%}{% if type.string == 'str' %}unicode_type{% else %}{{ type.string }}{% endif %}{%- endmacro -%}
{%- macro fix_type_docs(type)                    -%}{% if type.string == 'str' %}str|unicode{% else %}{{ type.as_import.full }}{% endif %}{%- endmacro -%}
{%- macro for_type_or_list(variable)             -%}{% for type in variable.types %}{% if type.is_list > 0 %}{{ "list" }}{% else %}{{ fix_type_isinstance(type) }}{% endif %}{% if not loop.last %}, {% endif -%}{% endfor %}{%- endmacro -%}
{%- macro for_type_list_of_full(variable)        -%}{% for type in variable.types %}{% if type.is_list > 0 %}{{ "list of " * type.is_list }}{% endif %}{{ fix_type_docs(type) }}{% if not loop.last %} | {% endif -%}{% endfor %}{%- endmacro -%}
{%- macro for_type_set_of_full(variable)         -%}{% for type in variable.types %}{% if type.is_list > 0 %}{{ "pony.Set(" * type.is_list }}{% endif %}{%  if not type.is_builtin %}"{%  endif %}{{ type.as_import.name }}{%  if not type.is_builtin %}"{%  endif %}{% if type.is_list > 0 %}{{ ")" * type.is_list }}{% endif %}{% endfor %}{%- endmacro -%}
{%- macro for_type_list_of(variable)             -%}{% for type in variable.types %}{% if type.is_list > 0 %}{{ "list of " * type.is_list }}{% endif %}{{ type.string }}{% if not loop.last %} | {% endif -%}{% endfor %}{%- endmacro -%}
{%- macro types_as_tuple(variables, variable)    -%}{% if variables.type|length > 1 %}({{ for_type_or_list(variable) }}){% else -%}{{ for_type_or_list(variable) }}{% endif -%}{%- endmacro -%}
{%- macro for_args_keys(variables)               -%}{%- for variable in variables %}"{{ variable.name }}"{% if not loop.last %}, {% endif -%}{%- endfor %}{% endmacro %}
{%- macro for_args_set(variables)                -%}{%- for variable in variables %}{{ variable.name }}={{ variable.name }}{% if not loop.last %}, {% endif -%}{%- endfor %}{% endmacro %}
{%- macro for_args_pytg_send_params(variables)   -%}{%- for variable in variables %}{{ variable.pytg_name }}=self.{{ variable.name }}{% if not loop.last %}, {% endif -%}{%- endfor %}{% endmacro %}
{%- macro for_args_none(variables)               -%}{%- for variable in variables %}{{ variable.name }}{% if variable.optional %}={% if variable.default == None %}None{% else %}{{ variable.default if variable.default is string else fix_type_docs(variable.default) }}{% endif %}{% endif %}{% if not loop.last %}, {% endif -%}{%- endfor %}{% endmacro %}
{%- macro for_args_format_str(variables)         -%}{%- for variable in variables %}{{ variable.name }}={{ "{" }}self.{{ variable.name }}{{ "}" }}{% if not loop.last %}, {% endif -%}{%- endfor %}{% endmacro %}
{%- macro for_args_format_repr(variables)        -%}{%- for variable in variables %}{{ variable.name }}={{ "{" }}self.{{ variable.name }}{{ "!r}" }}{% if not loop.last %}, {% endif -%}{%- endfor %}{% endmacro %}
{%- macro types_as_assert_tuple(variable)        -%}{%- if  variable.types|length > 1 %}({{ for_type_or_list(variable) }}){% else -%}{{ for_type_or_list(variable) }}{% endif -%}{%- endmacro -%}
{%- macro for_returns_type(function, do_builtin) -%}{%- for type in function.returns.types if type.is_builtin == False %}{% endfor %}{% endmacro %}


{#- CLASS RELATED STUFF -#}


{%- macro set_array(variable, class_name) -%}
{#
    Does the full

        array['xxx'] = u(self.xxx) | self.xxx.to_array() | self._as_array(self.xxx)

    including having multiple types:

       if isinstance(self.xxx, type1):
            array['xxx'] = u(self.xxx) | self.xxx.to_array() | self._as_array(self.xxx)
       elif isinstance(self.xxx, type2):
            array['xxx'] = u(self.xxx) | self.xxx.to_array() | self._as_array(self.xxx)
       else:
            raise TypeError('Unknown type, must be one of type1, type2.')
       # end if

-#}
{%- if variable.types|length == 1 -%}
{{- set_array_element(variable, variable.types[0]) -}}{#
 #}{%- else -%}
{%- for var_type in variable.types -%}
{%- if not loop.first %}el{% endif %}if isinstance(self.{{ variable.name }}, {{ var_type.string }}):
    {{ set_array_element(variable, var_type) -}}
{%- endfor -%}
else:
    raise TypeError('Unknown type, must be one of {{ for_type(variable) }}.')
# end if
{% endif -%}
{%- endmacro %}


{%- macro set_array_element(variable, var_type) -%}
{#-
    generates those

        array['xxx'] = u(self.xxx) | self.xxx.to_array() | self._as_array(self.xxx)

    for a single type only
-#}
{%- if var_type.is_list > 0 -%}
array['{{ variable.api_name }}'] = self._as_array(self.{{ variable.name }})  # type {{ for_type_list_of(variable) }}
{% else -%}
{% if var_type.is_builtin -%}
{%- if var_type.string == 'str' -%}
array['{{ variable.api_name }}'] = u(self.{{ variable.name }})  # py2: type unicode, py3: type str
{%- elif var_type.string == 'datetime.datetime' -%}
array['{{ variable.api_name }}'] = self.{{ variable.name }}.timestamp()
{%- elif var_type.string == 'None' -%}
array['{{ variable.api_name }}'] = None
{% else -%}
array['{{ variable.api_name }}'] = {{ var_type.string }}(self.{{ variable.name }})  # type {{ var_type.string }}
{%- endif -%}
{% else -%}
array['{{ variable.api_name }}'] = self.{{ variable.name }}.to_array()  # type {{ var_type.string }}
{% endif -%}
{% endif -%}
{%- endmacro %}


{%- macro set_data_array_element(variable, var_type, clazz_name, optional) -%}
{% if var_type.is_builtin -%}
        {% if var_type.string == 'str' -%}
        {% if var_type.is_list > 0 -%}
        data['{{ variable.name }}'] = {{ clazz_name }}._builtin_from_array_list(required_type=unicode_type, value=array.get('{{ variable.api_name }}'), list_level={{ var_type.is_list }}){%- if optional %} if array.get('{{ variable.api_name }}') is not None else None{%- endif %}
        {% else -%}
        data['{{ variable.name }}'] = u(array.get('{{ variable.api_name }}')){%- if optional %} if array.get('{{ variable.api_name }}') is not None else None{%- endif %}
        {% endif -%}
        {% elif var_type.string == 'datetime.datetime' %}
        {% if var_type.is_list > 0 -%}
        data['{{ variable.name }}'] = {{ clazz_name }}._builtin_from_array_list(required_type=datetime.datetime, value=array.get('{{ variable.api_name }}'), list_level={{ var_type.is_list }}){%- if optional %} if array.get('{{ variable.api_name }}') is not None else None{%- endif %}
        {% else -%}
        data['{{ variable.name }}'] = datetime.datetime.utcfromtimestamp(array.get('{{ variable.api_name }}')).replace(tzinfo=datetime.timezone.utc){%- if optional %} if array.get('{{ variable.api_name }}') is not None else None{%- endif %}
        {% endif -%}
        {% else -%}
        {% if var_type.is_list > 0 -%}
        data['{{ variable.name }}'] = {{ clazz_name }}._builtin_from_array_list(required_type={{ var_type.string }}, value=array.get('{{ variable.api_name }}'), list_level={{ var_type.is_list }}){%- if optional %} if array.get('{{ variable.api_name }}') is not None else None{%- endif %}
        {% else -%}
        data['{{ variable.name }}'] = {{ var_type.string }}(array.get('{{ variable.api_name }}')){%- if optional %} if array.get('{{ variable.api_name }}') is not None else None{%- endif %}
        {% endif -%}
        {% endif -%}
        {% else -%}
        {% if var_type.is_list > 0 -%}
        data['{{ variable.name }}'] = {{ var_type.string }}.from_array_list(array.get('{{ variable.api_name }}'), list_level={{ var_type.is_list }}){%- if optional %} if array.get('{{ variable.api_name }}') is not None else None{%- endif %}
        {% else -%}
        data['{{ variable.name }}'] = {{ var_type.string }}.from_array(array.get('{{ variable.api_name }}')){%- if optional %} if array.get('{{ variable.api_name }}') is not None else None{%- endif %}
        {% endif -%}
        {% endif -%}
{%- endmacro -%}
