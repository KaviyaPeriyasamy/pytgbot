{%- from "macros.template" import for_args_none, for_type_list_of_full, for_type_list_of, types_as_tuple -%}
{%- from "macros.template" import for_args_format_repr, for_args_keys, for_type -%}
{%- from "macros.template" import set_array, set_array_element, set_data_array_element -%}


class {{ clazz.clazz -}}({{ clazz.parent_clazz.string }}):
    """
    {% block class_docstring -%}
    {{ clazz.description.strip()|indent }}

    {{clazz.link}}
    {# first line -#}
    {%- if clazz.parameters %}

    Parameters:
    {% for param in clazz.parameters %}
    :param {{ param.name }}: {{ param.description }}
    :type  {{ param.name }}: {{ for_type_list_of_full(param) }}
    {% endfor -%}
    {%- endif -%}
    {#- {%- if clazz.keywords %} #}

    Optional keyword parameters:
    {% for keyword in clazz.keywords %}
    :param {{ keyword.name }}: {{ keyword.description }}
    :type  {{ keyword.name }}: {{ for_type_list_of_full(keyword) }}
    {% endfor -%}{%- if not is_sendable %}
    :param _raw: Optional. Original data this object was generated from. Could be `None`.
    :type  _raw: None | dict
    {% endif -%}{%- endblock -%}
    """

    def __init__(self, {{ for_args_none(clazz.variables) }}{% if not is_sendable %}, _raw=None{% endif %}):
        """
        {{ self.class_docstring()|indent -}}
        """
        super({{ clazz.clazz }}, self).__init__()

        {%- block imports_block -%}
        {%- if clazz.imports %}
        {% set file_import_path = clazz.import_path -%}
        {%- for import in clazz.imports -%}
        {{ import.import_statement_from_file(file_import_path) }}
        {% endfor -%}
        {% endif -%}
        {%- endblock -%}
        {%- for variable in clazz.variables -%}
        {% if variable.optional %}
        assert_type_or_raise({{ variable.name }}, None, {{ types_as_tuple(clazz.variables, variable) }}, parameter_name="{{ variable.name }}")
        {% if variable.always_is_value -%}
        if {{ variable.name }} is not None and {{ variable.name }} != {{ variable.always_is_value }}:
            raise ValueError("The parameter {{ variable.name }} should be the value {expected_value}, but is type {real_type}: {real_value!r}" )
        # end if
        {%- endif -%}
        {%- else %}
        assert_type_or_raise({{ variable.name }}, {{ types_as_tuple(clazz.variables, variable) }}, parameter_name="{{ variable.name }}")
        {% if variable.always_is_value -%}
        if {{ variable.name }} is not None and {{ variable.name }} != {{ variable.always_is_value }}:
            raise ValueError("The parameter {{ variable.name }} should be the value {expected_value}, but is type {real_type}: {real_value!r}" )
        # end if
        {%- endif %}
        {%- endif -%}
        self.{{ variable.name }} = {{ variable.name }}
        {%- if not loop.last %}
        {% endif -%}
        {% endfor %}{% if not is_sendable %}

        self._raw = _raw{% endif %}{# not is_sendable #}
    {# force line tabs -#}
    # end def __init__

    def to_array(self):
        """
        Serializes this {{ clazz.clazz }} to a dictionary.

        :return: dictionary representation of this object.
        :rtype: dict
        """
        array = super({{ clazz.clazz }}, self).to_array()
        {# fresh line -#}
        {% for variable in clazz.variables -%}
        {%- if variable.optional %}if self.{{ variable.name }} is not None:
            {{ set_array(variable)|indent(12) }}
        {% else -%}
        {{ set_array(variable)|indent(8) }}
        {% endif -%}
        {% endfor -%}
        return array
    # end def to_array

    @staticmethod
    def validate_array(array):
        """
        Builds a new array with valid values for the {{ clazz.clazz }} constructor.

        :return: new array with valid values
        :rtype: dict
        """
        assert_type_or_raise(array, dict, parameter_name="array")
        {#- strip linebreak after -#}
        {{- self.imports_block() -}}
        {#- does strip before #}
        {#- this will be a new line #}
        data = {{ clazz.parent_clazz.string }}.validate_array(array)
        {% for variable in clazz.variables -%}
        {%- if variable.types|length == 1 -%}
        {{- set_data_array_element(variable, variable.types[0], clazz.clazz, variable.optional) -}}
        {%- else -%}
        {%- if variable.optional -%}
        if array.get('{{ variable.api_name }}') is None:
            data['{{ variable.name }}'] = None
        {% endif -%}
        {%- for var_type in variable.types -%}
        {%- if not loop.first or variable.optional %}el{% endif %}if isinstance(array.get('{{ variable.api_name }}'), {{ var_type.string }}):
            {{ set_data_array_element(variable, var_type, clazz.clazz, False) -}}
        {%- endfor -%}
        else:
            raise TypeError('Unknown type, must be one of {{ for_type(variable) }}{% if variable.optional %} or None{% endif %}.')
        # end if
        {%- endif -%}
        {%- endfor -%}
        return data
        {#- remove empty line  #}
    # end def validate_array

    @staticmethod
    def from_array(array):
        """
        Deserialize a new {{ clazz.clazz }} from a given dictionary.

        :return: new {{ clazz.clazz }} instance.
        :rtype: {{ clazz.clazz }}
        """
        if not array:  # None or {}
            return None
        # end if

        data = {{ clazz.clazz }}.validate_array(array)
        {% if not is_sendable -%}
        data['_raw'] = array
        return {{ clazz.clazz }}(**data){% else -%}
        instance = {{ clazz.clazz }}(**data)
        instance._raw = array
        return instance{% endif %}
    # end def from_array

    def __str__(self):
        """
        Implements `str({{ clazz.clazz|lower }}_instance)`
        """
        return "{{ clazz.clazz }}({{ for_args_format_repr(clazz.variables) }})".format(self=self)
    # end def __str__

    def __repr__(self):
        """
        Implements `repr({{ clazz.clazz|lower }}_instance)`
        """
        if self._raw:
            return "{{ clazz.clazz }}.from_array({self._raw})".format(self=self)
        # end if
        return "{{ clazz.clazz }}({{ for_args_format_repr(clazz.variables) }})".format(self=self)
    # end def __repr__

    def __contains__(self, key):
        """
        Implements `"key" in {{ clazz.clazz|lower }}_instance`
        """
        return (
            key in [{{ for_args_keys(clazz.variables) }}]
            and hasattr(self, key)
            and bool(getattr(self, key, None))
        )
    # end def __contains__
# end class {{ clazz.clazz }}
